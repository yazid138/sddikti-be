generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(255)
  email     String   @unique @db.VarChar(100)
  password  String   @db.VarChar(150)
  roleId    String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  role Role @relation(fields: [roleId], references: [id])

  @@map("m_users")
}

model Role {
  id   String @id @default(uuid())
  name String @unique @db.VarChar(50)

  users User[]
  apis  Api[]

  @@map("m_roles")
}

model Category {
  id   String @id @default(uuid())
  name String @unique @db.VarChar(50)

  // apis Api[]
  apis Api[]

  @@map("m_categories")
}

model QueryApi {
  id    String @id @default(uuid())
  apiId String @map("api_id")
  name  String @db.VarChar(100)
  type  String

  api Api @relation(fields: [apiId], references: [id])

  @@map("m_query_api")
}

model AuthApiData {
  id        String @id @default(uuid())
  authApiId String @map("auth_api_id")
  name      String @db.VarChar(100)
  value     String

  auth AuthApi @relation(fields: [authApiId], references: [id])

  @@map("m_auth_api_data")
}

model AuthApi {
  id    String @id @default(uuid())
  apiId String @unique @map("api_id")
  type  String

  data AuthApiData[]
  api  Api           @relation(fields: [apiId], references: [id])

  @@map("m_auth_api")
}

model Api {
  id          String    @id @default(uuid())
  name        String    @db.VarChar(150)
  url         String    @db.VarChar(255)
  author      String?   @db.VarChar(150)
  description String?   @db.VarChar(255)
  status      StatusAPI @default(AKTIF)
  createdBy   String?   @map("created_by") @db.VarChar(150)
  updatedBy   String?   @map("updated_by") @db.VarChar(150)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  // categories Category[]
  categories Category[]
  roles      Role[]
  query      QueryApi[]
  auth       AuthApi?

  @@map("m_apis")
}

enum StatusAPI {
  AKTIF
  TIDAK_AKTIF
}
